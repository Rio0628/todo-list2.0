{"version":3,"sources":["components/CurrentTasksView.js","components/FinishedTasksView.js","components/IndTodoTask.js","components/IndFinishedTask.js","api/index.js","App.js","reportWebVitals.js","index.js"],"names":["CurrentTasksView","props","currentTasksCntr","todoTasks","i","length","push","currentTaskOpen","task","taskNameEdit","onClick","onChange","className","clockTime","placeholder","addNewTask","handleFinishedTsksView","FinishedTasksView","finishedTasksCntr","finishedTasks","handleFinishedTasksView","finishedTsksActive","IndTodoTask","nameEdit","_id","type","defaultValue","name","value","date","IndFinishedTask","api","axios","create","baseURL","apis","insertTask","payload","post","getAllTasks","get","updateTaskById","id","put","deleteTaskById","delete","App","state","a","then","tasks","allTasks","data","catch","filter","this","setState","Date","toLocaleString","timezone","split","updatedDate","toString","appDate","clockTimeout","setTimeout","setClockTime","clockStopped","clearTimeout","handleShowingTasks","e","target","taskNameInput","getAttribute","console","log","err","alert","addTaskInput","currentId","window","location","reload","setFinishedViewState","finishedTasksViewOn","object","document","querySelector","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0c296b32.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MdAddBox } from 'react-icons/md';\r\nimport { BsCheckSquareFill } from 'react-icons/bs';\r\nimport { IndTodoTask } from '../pages';\r\n\r\nconst CurrentTasksView = (props) => {\r\n    let currentTasksCntr = [];\r\n    \r\n    // Conditional for bringing the current finished tasks to view \r\n    if (props.todoTasks) {\r\n        for (let i = 0; i < props.todoTasks.length; i++) {\r\n            currentTasksCntr.push( <IndTodoTask currentTaskOpen={props.currentTaskOpen} task={props.todoTasks[i]} taskNameEdit={props.taskNameEdit} onClick={props.onClick} onChange={props.onChange} key={'IndTodoTask ' + i}/> );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='currentTasksCntr'>\r\n            <div className='nav-bar'>\r\n                <p className='headingApp'>Todo-List</p>\r\n\r\n                <p className='dateDisplay'>{props.clockTime}</p>\r\n            </div>\r\n\r\n            <div className='addTaskBar'>\r\n                <input className='addTaskInput' placeholder='Add Task...' onChange={props.onChange}/>\r\n                \r\n                <p className='addTaskBtnLrg' onClick={props.addNewTask}>Add Task</p>\r\n                <MdAddBox className='addTaskBtn' onClick={props.addNewTask}/>\r\n\r\n                <BsCheckSquareFill className='viewFinishedTaskBtn' onClick={props.handleFinishedTsksView}/>\r\n            </div>\r\n\r\n            <div className='todoTasksCntr'>\r\n                {currentTasksCntr}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CurrentTasksView;","import React from 'react';\r\nimport { BiLeftArrow } from 'react-icons/bi';\r\nimport { IndFinishedTask } from  '../pages';\r\n\r\nconst FinishedTasksView = (props) => {\r\n    let finishedTasksCntr = [];\r\n\r\n    // Conditional for bringing the current finished tasks to view \r\n    if (props.finishedTasks) {\r\n        for (let i = 0; i < props.finishedTasks.length; i++) {\r\n            finishedTasksCntr.push(<IndFinishedTask currentTaskOpen={props.currentTaskOpen} task={props.finishedTasks[i]} taskNameEdit={props.taskNameEdit} onClick={props.onClick} onChange={props.onChange} key={'FinishedTask ' + i}/>);\r\n        }\r\n    }\r\n\r\n    // Conditional function to bring the finished tasks view up ( Smaller viewports )\r\n    const handleFinishedTasksView = props.finishedTsksActive ? 'active' : '';\r\n\r\n    return (\r\n        <div className={'finishedTasksCntr ' + handleFinishedTasksView}>\r\n            <div className='returnBtn-headingCntr'>\r\n                <div className='returnBtnCntr' onClick={props.handleFinishedTsksView}>\r\n                    <BiLeftArrow className='returnBtn'/>\r\n                    <p className='returnBtnHeading'>Return</p>\r\n                </div>\r\n\r\n                <p className='finishedTasksHeading'>Finished</p>\r\n            </div>\r\n\r\n            <div className='indFnshdTasksCntr'>\r\n                { finishedTasksCntr}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FinishedTasksView","import React from 'react';\r\nimport { MdFileDownloadDone } from 'react-icons/md'\r\n\r\nconst IndTodoTask = (props) => {\r\n    let nameEdit = false;\r\n\r\n    // Function to show the date value of a task\r\n    const setDate = () => props.task.date !== '' ? props.task.date : null;\r\n\r\n    // Conditional to show the textarea of a task if the prop id is the same as the currentTaskOpen prop\r\n    if (props.currentTaskOpen === props.task._id) {\r\n        nameEdit = props.taskNameEdit;\r\n    }\r\n\r\n    return (\r\n        <div className='indTodoTask'>\r\n            <div className='finishTaskBtn' onClick={props.onClick} task={props.task._id}><MdFileDownloadDone className='icon'/></div>\r\n\r\n            { nameEdit ?\r\n                <textarea className='taskNameInput' type='text' defaultValue={props.task.name} task={props.task._id} onChange={props.onChange}/>\r\n            : <p className='taskName' onClick={props.onClick} task={props.task._id}>{props.task.name}</p> }\r\n\r\n            <input type='date' className='dateInput' value={setDate()} onChange={props.onChange}  task={props.task._id}/>\r\n\r\n            <div className='removeTaskBtn' onClick={props.onClick} task={props.task._id}>Remove</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndTodoTask;","import React from 'react';\r\nimport { BsArrowLeftSquareFill } from 'react-icons/bs'\r\n\r\nconst IndFinishedTask = (props) => {\r\n    let nameEdit = false;\r\n\r\n    // Conditional to show the textarea of a task if the prop id is the same as the currentTaskOpen prop\r\n    if (props.currentTaskOpen === props.task._id) {\r\n        nameEdit = props.taskNameEdit;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='indFinishedTask'>\r\n            <div className='returnTaskBtn' onClick={props.onClick} task={props.task._id}><BsArrowLeftSquareFill className='icon'/></div>\r\n\r\n            { nameEdit ?\r\n                <textarea className='taskNameInput' type='text' defaultValue={props.task.name} task={props.task._id} onChange={props.onChange}/>\r\n            : <p className='taskName' task={props.task._id} onClick={props.onClick}>{props.task.name}</p> }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndFinishedTask","import axios from 'axios';\r\n\r\nconst api = axios.create({ baseURL: 'http://localhost:3000/api', });\r\n\r\nexport const insertTask = payload => api.post(`/task`, payload);\r\nexport const getAllTasks = () => api.get(`/tasks`);\r\nexport const updateTaskById = (id, payload) => api.put(`/task/${id}`, payload);\r\nexport const deleteTaskById = id => api.delete(`/task/${id}`);\r\n\r\nconst apis = { insertTask, getAllTasks, updateTaskById, deleteTaskById };\r\nexport default apis;","import React, { Component } from 'react';\nimport { CurrentTasksView, FinishedTasksView } from './pages';\nimport api from './api';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n    }\n  }\n\n  async handleShowingTasks () {\n    // Method to call all tasks from the database and filter them according to their type value \n    let allTasks, todoTasks, finishedTasks;\n\n    await api.getAllTasks().then( tasks => allTasks = tasks.data.data ).catch( allTasks = []);\n\n    todoTasks = await allTasks.filter( task => task.type === 'to-do');\n    finishedTasks = await allTasks.filter( task => task.type === 'finished');\n    \n    this.setState({ allTasks: allTasks });\n    this.setState({ todoTasks: todoTasks });\n    this.setState({ finishedTasks: finishedTasks });\n\n  }\n\n  async setClockTime () {\n    // Method to get the current date and time and display it in the application\n    let date = new Date(), updatedDate;\n    updatedDate = await date.toLocaleString(('en-US'), { timezone: 'America/New_York' }).split(',');\n    date = date.toString().split(' ')\n    const appDate = `${date[1]} ${date[2]} |${updatedDate[1]}`\n    this.setState({ clockTime: appDate });\n\n    let clockTimeout = setTimeout( () => this.setClockTime(), 1000);\n\n    if (this.state.clockStopped) { clearTimeout(clockTimeout) }\n  }\n\n  componentDidMount () {\n    this.setClockTime();\n    this.handleShowingTasks();\n  }\n\n  componentWillUnmount () {\n    // Clears the main clock timeout \n    clearTimeout(this.setClockTime());\n  }\n  \n  render () {\n\n    const onChange = async (e) => {\n      // Main onChange function \n\n      if (e.target.className === 'taskNameInput') {\n        // Function to update the name value of a specific task\n        await this.setState({ taskNameInput: e.target.value });\n        let task = this.state.allTasks.filter( task => task._id === e.target.getAttribute('task') );\n        task[0].name = e.target.value;\n\n        await api.updateTaskById(task[0]._id, task[0]).then( task => console.log('Task Updated')).catch( err => alert(err) );\n      }\n\n      if (e.target.className === 'addTaskInput') {\n        this.setState({ addTaskInput: e.target.value });\n      }\n\n      if (e.target.className === 'dateInput') {\n        // Function to update the date value of a specified task \n        let task = this.state.todoTasks.filter( task => task._id === e.target.getAttribute('task') );\n        task[0].date = e.target.value;\n\n        await api.updateTaskById(task[0]._id, task[0]).then( task => console.log('Task Updated'));\n      }\n    }\n\n    const onClick = async (e) => {\n      // Main onClick Function\n\n      if (e.target.className === 'taskName') {\n        // Changes the p element of a specific task to the textarrea element to allow the user to change it \n        this.setState({ currentTaskOpen: e.target.getAttribute('task') });\n        this.setState({ taskNameEdit: true });\n      }\n\n      if (e.target.className === 'todoTasksCntr' || e.target.className === 'indFnshdTasksCntr') {\n        // Triggers the change of the textarea element of a certain task to turn back into the usual p element \n        this.setState({ taskNameEdit: false });\n      }\n\n      if (e.target.className === 'removeTaskBtn') {\n        // Removes a certain task from the database \n        await this.setState({ currentId: e.target.getAttribute('task') });\n\n        await api.deleteTaskById(e.target.getAttribute('task')).then( task => console.log('Task Removed') ).catch( err => this.setState({ allTasks: [] }) );\n        this.handleShowingTasks();\n        window.location.reload();\n      }\n      \n      if (e.target.className === 'finishTaskBtn') {\n        // Updates a certain task from the current tasks view to the finished tasks view \n        const task = this.state.todoTasks.filter( task => task._id === e.target.getAttribute('task'))\n        task[0].type = 'finished';\n\n        await api.updateTaskById(task[0]._id, task[0]).then( task => console.log('task updated') );\n        this.handleShowingTasks();\n      }\n\n      if (e.target.className === 'returnTaskBtn') {\n        // Updates a certain task from the finished tasks view to the current tasks view \n        const task = this.state.finishedTasks.filter( task => task._id === e.target.getAttribute('task'));\n        task[0].type = 'to-do';\n\n        await api.updateTaskById(task[0]._id, task[0]).then( task => console.log('task updated') );\n        this.handleShowingTasks();\n      }\n    }\n\n    // Takes care of bringing the finished tasks view \n    const setFinishedViewState = () => this.setState({ finishedTasksViewOn: !this.state.finishedTasksViewOn });\n\n    const addNewTask = async () => {\n      // Takes care of adding a new task element to the database\n      let object = { name: this.state.addTaskInput, date: ' ', type: 'to-do'}\n      await api.insertTask(object).then( task => console.log('Task Added') ).catch( err => alert('Name needed for adding task.') );\n      this.handleShowingTasks();\n      document.querySelector('.addTaskInput').value = ''\n    };\n      \n    return (\n      <div className=\"container\" onClick={onClick}>\n        <CurrentTasksView clockTime={this.state.clockTime} currentTaskOpen={this.state.currentTaskOpen} todoTasks={this.state.todoTasks} taskNameEdit={this.state.taskNameEdit} handleFinishedTsksView={setFinishedViewState} onChange={onChange} addNewTask={addNewTask} onClick={onClick}/> \n        \n        <FinishedTasksView currentTaskOpen={this.state.currentTaskOpen} finishedTasks={this.state.finishedTasks} taskNameEdit={this.state.taskNameEdit} finishedTsksActive={this.state.finishedTasksViewOn} handleFinishedTsksView={setFinishedViewState} onClick={onClick} onChange={onChange}/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}