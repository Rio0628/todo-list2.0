{"version":3,"sources":["components/CurrentTasksView.js","components/FinishedTasksView.js","components/IndTodoTask.js","components/IndFinishedTask.js","api/index.js","App.js","reportWebVitals.js","index.js"],"names":["CurrentTasksView","props","currentTasksCntr","todoTasks","i","length","push","currentTaskOpen","task","taskNameEdit","onClick","onChange","className","clockTime","placeholder","addNewTask","handleFinishedTsksView","FinishedTasksView","finishedTasksCntr","finishedTasks","handleFinishedTasksView","finishedTsksActive","IndTodoTask","nameEdit","_id","type","defaultValue","name","value","date","IndFinishedTask","apis","insertTask","payload","axios","post","getAllTasks","get","updateTaskById","id","put","deleteTaskById","delete","App","state","a","api","then","tasks","allTasks","data","catch","filter","this","setState","Date","toLocaleString","timezone","split","updatedDate","toString","appDate","clockTimeout","setTimeout","setClockTime","clockStopped","clearTimeout","handleShowingTasks","e","target","taskNameInput","getAttribute","console","log","err","alert","addTaskInput","currentId","window","location","reload","setFinishedViewState","finishedTasksViewOn","object","document","querySelector","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yQAuCeA,EAlCU,SAACC,GACtB,IAAIC,EAAmB,GAGvB,GAAID,EAAME,UACN,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAME,UAAUE,OAAQD,IACxCF,EAAiBI,KAAM,cAAC,EAAD,CAAaC,gBAAiBN,EAAMM,gBAAiBC,KAAMP,EAAME,UAAUC,GAAIK,aAAcR,EAAMQ,aAAcC,QAAST,EAAMS,QAASC,SAAUV,EAAMU,UAAe,eAAiBP,IAIxN,OACI,sBAAKQ,UAAU,mBAAf,UACI,sBAAKA,UAAU,UAAf,UACI,mBAAGA,UAAU,aAAb,uBAEA,mBAAGA,UAAU,cAAb,SAA4BX,EAAMY,eAGtC,sBAAKD,UAAU,aAAf,UACI,uBAAOA,UAAU,eAAeE,YAAY,cAAcH,SAAUV,EAAMU,WAE1E,mBAAGC,UAAU,gBAAgBF,QAAST,EAAMc,WAA5C,sBACA,cAAC,IAAD,CAAUH,UAAU,aAAaF,QAAST,EAAMc,aAEhD,cAAC,IAAD,CAAmBH,UAAU,sBAAsBF,QAAST,EAAMe,4BAGtE,qBAAKJ,UAAU,gBAAf,SACKV,Q,QCEFe,EA/BW,SAAChB,GACvB,IAAIiB,EAAoB,GAGxB,GAAIjB,EAAMkB,cACN,IAAK,IAAIf,EAAI,EAAGA,EAAIH,EAAMkB,cAAcd,OAAQD,IAC5Cc,EAAkBZ,KAAK,cAAC,EAAD,CAAiBC,gBAAiBN,EAAMM,gBAAiBC,KAAMP,EAAMkB,cAAcf,GAAIK,aAAcR,EAAMQ,aAAcC,QAAST,EAAMS,QAASC,SAAUV,EAAMU,UAAe,gBAAkBP,IAKjO,IAAMgB,EAA0BnB,EAAMoB,mBAAqB,SAAW,GAEtE,OACI,sBAAKT,UAAW,qBAAuBQ,EAAvC,UACI,sBAAKR,UAAU,wBAAf,UACI,sBAAKA,UAAU,gBAAgBF,QAAST,EAAMe,uBAA9C,UACI,cAAC,IAAD,CAAaJ,UAAU,cACvB,mBAAGA,UAAU,mBAAb,uBAGJ,mBAAGA,UAAU,uBAAb,yBAGJ,qBAAKA,UAAU,oBAAf,SACMM,QCAHI,EA1BK,SAACrB,GACjB,IAAIsB,GAAW,EAUf,OAJItB,EAAMM,kBAAoBN,EAAMO,KAAKgB,MACrCD,EAAWtB,EAAMQ,cAIjB,sBAAKG,UAAU,cAAf,UACI,qBAAKA,UAAU,gBAAgBF,QAAST,EAAMS,QAASF,KAAMP,EAAMO,KAAKgB,IAAxE,SAA6E,cAAC,IAAD,CAAoBZ,UAAU,WAEzGW,EACE,0BAAUX,UAAU,gBAAgBa,KAAK,OAAOC,aAAczB,EAAMO,KAAKmB,KAAMnB,KAAMP,EAAMO,KAAKgB,IAAKb,SAAUV,EAAMU,WACvH,mBAAGC,UAAU,WAAWF,QAAST,EAAMS,QAASF,KAAMP,EAAMO,KAAKgB,IAAjE,SAAuEvB,EAAMO,KAAKmB,OAEpF,uBAAOF,KAAK,OAAOb,UAAU,YAAYgB,MAfP,KAApB3B,EAAMO,KAAKqB,KAAc5B,EAAMO,KAAKqB,KAAO,KAeElB,SAAUV,EAAMU,SAAWH,KAAMP,EAAMO,KAAKgB,MAEvG,qBAAKZ,UAAU,gBAAgBF,QAAST,EAAMS,QAASF,KAAMP,EAAMO,KAAKgB,IAAxE,wBCDGM,EApBS,SAAC7B,GACrB,IAAIsB,GAAW,EAQf,OALItB,EAAMM,kBAAoBN,EAAMO,KAAKgB,MACrCD,EAAWtB,EAAMQ,cAKjB,sBAAKG,UAAU,kBAAf,UACI,qBAAKA,UAAU,gBAAgBF,QAAST,EAAMS,QAASF,KAAMP,EAAMO,KAAKgB,IAAxE,SAA6E,cAAC,IAAD,CAAuBZ,UAAU,WAE5GW,EACE,0BAAUX,UAAU,gBAAgBa,KAAK,OAAOC,aAAczB,EAAMO,KAAKmB,KAAMnB,KAAMP,EAAMO,KAAKgB,IAAKb,SAAUV,EAAMU,WACvH,mBAAGC,UAAU,WAAWJ,KAAMP,EAAMO,KAAKgB,IAAKd,QAAST,EAAMS,QAA7D,SAAuET,EAAMO,KAAKmB,W,gBCRjFI,EADF,CAAEC,WALW,SAAAC,GAAO,OAAIC,IAAMC,KAAN,YAAwBF,IAKlCG,YAJA,kBAAMF,IAAMG,IAAN,eAIOC,eAHV,SAACC,EAAIN,GAAL,OAAiBC,IAAMM,IAAN,oBAAuBD,GAAMN,IAGpBQ,eAF1B,SAAAF,GAAE,OAAIL,IAAMQ,OAAN,oBAA0BH,MCHxDI,E,kDACJ,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IACD2C,MAAQ,GAFI,E,6FAOnB,gCAAAC,EAAA,sEAIQC,EAAIV,cAAcW,MAAM,SAAAC,GAAK,OAAIC,EAAWD,EAAME,KAAKA,QAAOC,MAAOF,EAAW,IAJxF,uBAMoBA,EAASG,QAAQ,SAAA5C,GAAI,MAAkB,UAAdA,EAAKiB,QANlD,cAMEtB,EANF,gBAOwB8C,EAASG,QAAQ,SAAA5C,GAAI,MAAkB,aAAdA,EAAKiB,QAPtD,OAOEN,EAPF,OASEkC,KAAKC,SAAS,CAAEL,SAAUA,IAC1BI,KAAKC,SAAS,CAAEnD,UAAWA,IAC3BkD,KAAKC,SAAS,CAAEnC,cAAeA,IAXjC,iD,uHAeA,yCAAA0B,EAAA,6DAEMhB,EAAO,IAAI0B,KAFjB,SAGsB1B,EAAK2B,eAAgB,QAAU,CAAEC,SAAU,qBAAsBC,MAAM,KAH7F,OAGEC,EAHF,OAIE9B,EAAOA,EAAK+B,WAAWF,MAAM,KACvBG,EALR,UAKqBhC,EAAK,GAL1B,YAKgCA,EAAK,GALrC,aAK4C8B,EAAY,IACtDN,KAAKC,SAAS,CAAEzC,UAAWgD,IAEvBC,EAAeC,YAAY,kBAAM,EAAKC,iBAAgB,KAEtDX,KAAKT,MAAMqB,cAAgBC,aAAaJ,GAV9C,gD,qFAaA,WACET,KAAKW,eACLX,KAAKc,uB,kCAGP,WAEED,aAAab,KAAKW,kB,oBAGpB,WAAW,IAAD,OAEFrD,EAAQ,uCAAG,WAAOyD,GAAP,iBAAAvB,EAAA,yDAGY,kBAAvBuB,EAAEC,OAAOzD,UAHE,gCAKP,EAAK0C,SAAS,CAAEgB,cAAeF,EAAEC,OAAOzC,QALjC,cAMTpB,EAAO,EAAKoC,MAAMK,SAASG,QAAQ,SAAA5C,GAAI,OAAIA,EAAKgB,MAAQ4C,EAAEC,OAAOE,aAAa,YAC7E,GAAG5C,KAAOyC,EAAEC,OAAOzC,MAPX,SASPkB,EAAIR,eAAe9B,EAAK,GAAGgB,IAAKhB,EAAK,IAAIuC,MAAM,SAAAvC,GAAI,OAAIgE,QAAQC,IAAI,mBAAiBtB,OAAO,SAAAuB,GAAG,OAAIC,MAAMD,MATjG,UAYY,iBAAvBN,EAAEC,OAAOzD,WACX,EAAK0C,SAAS,CAAEsB,aAAcR,EAAEC,OAAOzC,QAGd,cAAvBwC,EAAEC,OAAOzD,UAhBE,wBAkBTJ,EAAO,EAAKoC,MAAMzC,UAAUiD,QAAQ,SAAA5C,GAAI,OAAIA,EAAKgB,MAAQ4C,EAAEC,OAAOE,aAAa,WACnF/D,EAAK,GAAGqB,KAAOuC,EAAEC,OAAOzC,MAnBX,UAqBPkB,EAAIR,eAAe9B,EAAK,GAAGgB,IAAKhB,EAAK,IAAIuC,MAAM,SAAAvC,GAAI,OAAIgE,QAAQC,IAAI,mBArB5D,4CAAH,sDAyBR/D,EAAO,uCAAG,WAAO0D,GAAP,iBAAAvB,EAAA,yDAGa,aAAvBuB,EAAEC,OAAOzD,YAEX,EAAK0C,SAAS,CAAE/C,gBAAiB6D,EAAEC,OAAOE,aAAa,UACvD,EAAKjB,SAAS,CAAE7C,cAAc,KAGL,kBAAvB2D,EAAEC,OAAOzD,WAAwD,sBAAvBwD,EAAEC,OAAOzD,WAErD,EAAK0C,SAAS,CAAE7C,cAAc,IAGL,kBAAvB2D,EAAEC,OAAOzD,UAdC,gCAgBN,EAAK0C,SAAS,CAAEuB,UAAWT,EAAEC,OAAOE,aAAa,UAhB3C,uBAkBNzB,EAAIL,eAAe2B,EAAEC,OAAOE,aAAa,SAASxB,MAAM,SAAAvC,GAAI,OAAIgE,QAAQC,IAAI,mBAAkBtB,OAAO,SAAAuB,GAAG,OAAI,EAAKpB,SAAS,CAAEL,SAAU,QAlBhI,OAmBZ,EAAKkB,qBACLW,OAAOC,SAASC,SApBJ,UAuBa,kBAAvBZ,EAAEC,OAAOzD,UAvBC,wBAyBNJ,EAAO,EAAKoC,MAAMzC,UAAUiD,QAAQ,SAAA5C,GAAI,OAAIA,EAAKgB,MAAQ4C,EAAEC,OAAOE,aAAa,YAChF,GAAG9C,KAAO,WA1BH,UA4BNqB,EAAIR,eAAe9B,EAAK,GAAGgB,IAAKhB,EAAK,IAAIuC,MAAM,SAAAvC,GAAI,OAAIgE,QAAQC,IAAI,mBA5B7D,QA6BZ,EAAKN,qBA7BO,WAgCa,kBAAvBC,EAAEC,OAAOzD,UAhCC,wBAkCNJ,EAAO,EAAKoC,MAAMzB,cAAciC,QAAQ,SAAA5C,GAAI,OAAIA,EAAKgB,MAAQ4C,EAAEC,OAAOE,aAAa,WACzF/D,EAAK,GAAGiB,KAAO,QAnCH,UAqCNqB,EAAIR,eAAe9B,EAAK,GAAGgB,IAAKhB,EAAK,IAAIuC,MAAM,SAAAvC,GAAI,OAAIgE,QAAQC,IAAI,mBArC7D,QAsCZ,EAAKN,qBAtCO,4CAAH,sDA2CPc,EAAuB,kBAAM,EAAK3B,SAAS,CAAE4B,qBAAsB,EAAKtC,MAAMsC,uBAE9EnE,EAAU,uCAAG,4BAAA8B,EAAA,6DAEbsC,EAAS,CAAExD,KAAM,EAAKiB,MAAMgC,aAAc/C,KAAM,IAAKJ,KAAM,SAF9C,SAGXqB,EAAId,WAAWmD,GAAQpC,MAAM,SAAAvC,GAAI,OAAIgE,QAAQC,IAAI,iBAAgBtB,OAAO,SAAAuB,GAAG,OAAIC,MAAM,mCAH1E,OAIjB,EAAKR,qBACLiB,SAASC,cAAc,iBAAiBzD,MAAQ,GAL/B,2CAAH,qDAQhB,OACE,sBAAKhB,UAAU,YAAYF,QAASA,EAApC,UACE,cAAC,EAAD,CAAkBG,UAAWwC,KAAKT,MAAM/B,UAAWN,gBAAiB8C,KAAKT,MAAMrC,gBAAiBJ,UAAWkD,KAAKT,MAAMzC,UAAWM,aAAc4C,KAAKT,MAAMnC,aAAcO,uBAAwBiE,EAAsBtE,SAAUA,EAAUI,WAAYA,EAAYL,QAASA,IAE3Q,cAAC,EAAD,CAAmBH,gBAAiB8C,KAAKT,MAAMrC,gBAAiBY,cAAekC,KAAKT,MAAMzB,cAAeV,aAAc4C,KAAKT,MAAMnC,aAAcY,mBAAoBgC,KAAKT,MAAMsC,oBAAqBlE,uBAAwBiE,EAAsBvE,QAASA,EAASC,SAAUA,W,GAlIpQ2E,aAwIH3C,IChIA4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BX,M","file":"static/js/main.6d4a2c92.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MdAddBox } from 'react-icons/md';\r\nimport { BsCheckSquareFill } from 'react-icons/bs';\r\nimport { IndTodoTask } from '../pages';\r\n\r\nconst CurrentTasksView = (props) => {\r\n    let currentTasksCntr = [];\r\n    \r\n    // Conditional for bringing the current finished tasks to view \r\n    if (props.todoTasks) {\r\n        for (let i = 0; i < props.todoTasks.length; i++) {\r\n            currentTasksCntr.push( <IndTodoTask currentTaskOpen={props.currentTaskOpen} task={props.todoTasks[i]} taskNameEdit={props.taskNameEdit} onClick={props.onClick} onChange={props.onChange} key={'IndTodoTask ' + i}/> );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='currentTasksCntr'>\r\n            <div className='nav-bar'>\r\n                <p className='headingApp'>Todo-List</p>\r\n\r\n                <p className='dateDisplay'>{props.clockTime}</p>\r\n            </div>\r\n\r\n            <div className='addTaskBar'>\r\n                <input className='addTaskInput' placeholder='Add Task...' onChange={props.onChange}/>\r\n                \r\n                <p className='addTaskBtnLrg' onClick={props.addNewTask}>Add Task</p>\r\n                <MdAddBox className='addTaskBtn' onClick={props.addNewTask}/>\r\n\r\n                <BsCheckSquareFill className='viewFinishedTaskBtn' onClick={props.handleFinishedTsksView}/>\r\n            </div>\r\n\r\n            <div className='todoTasksCntr'>\r\n                {currentTasksCntr}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CurrentTasksView;","import React from 'react';\r\nimport { BiLeftArrow } from 'react-icons/bi';\r\nimport { IndFinishedTask } from  '../pages';\r\n\r\nconst FinishedTasksView = (props) => {\r\n    let finishedTasksCntr = [];\r\n\r\n    // Conditional for bringing the current finished tasks to view \r\n    if (props.finishedTasks) {\r\n        for (let i = 0; i < props.finishedTasks.length; i++) {\r\n            finishedTasksCntr.push(<IndFinishedTask currentTaskOpen={props.currentTaskOpen} task={props.finishedTasks[i]} taskNameEdit={props.taskNameEdit} onClick={props.onClick} onChange={props.onChange} key={'FinishedTask ' + i}/>);\r\n        }\r\n    }\r\n\r\n    // Conditional function to bring the finished tasks view up ( Smaller viewports )\r\n    const handleFinishedTasksView = props.finishedTsksActive ? 'active' : '';\r\n\r\n    return (\r\n        <div className={'finishedTasksCntr ' + handleFinishedTasksView}>\r\n            <div className='returnBtn-headingCntr'>\r\n                <div className='returnBtnCntr' onClick={props.handleFinishedTsksView}>\r\n                    <BiLeftArrow className='returnBtn'/>\r\n                    <p className='returnBtnHeading'>Return</p>\r\n                </div>\r\n\r\n                <p className='finishedTasksHeading'>Finished</p>\r\n            </div>\r\n\r\n            <div className='indFnshdTasksCntr'>\r\n                { finishedTasksCntr}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FinishedTasksView","import React from 'react';\r\nimport { MdFileDownloadDone } from 'react-icons/md'\r\n\r\nconst IndTodoTask = (props) => {\r\n    let nameEdit = false;\r\n\r\n    // Function to show the date value of a task\r\n    const setDate = () => props.task.date !== '' ? props.task.date : null;\r\n\r\n    // Conditional to show the textarea of a task if the prop id is the same as the currentTaskOpen prop\r\n    if (props.currentTaskOpen === props.task._id) {\r\n        nameEdit = props.taskNameEdit;\r\n    }\r\n\r\n    return (\r\n        <div className='indTodoTask'>\r\n            <div className='finishTaskBtn' onClick={props.onClick} task={props.task._id}><MdFileDownloadDone className='icon'/></div>\r\n\r\n            { nameEdit ?\r\n                <textarea className='taskNameInput' type='text' defaultValue={props.task.name} task={props.task._id} onChange={props.onChange}/>\r\n            : <p className='taskName' onClick={props.onClick} task={props.task._id}>{props.task.name}</p> }\r\n\r\n            <input type='date' className='dateInput' value={setDate()} onChange={props.onChange}  task={props.task._id}/>\r\n\r\n            <div className='removeTaskBtn' onClick={props.onClick} task={props.task._id}>Remove</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndTodoTask;","import React from 'react';\r\nimport { BsArrowLeftSquareFill } from 'react-icons/bs'\r\n\r\nconst IndFinishedTask = (props) => {\r\n    let nameEdit = false;\r\n\r\n    // Conditional to show the textarea of a task if the prop id is the same as the currentTaskOpen prop\r\n    if (props.currentTaskOpen === props.task._id) {\r\n        nameEdit = props.taskNameEdit;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='indFinishedTask'>\r\n            <div className='returnTaskBtn' onClick={props.onClick} task={props.task._id}><BsArrowLeftSquareFill className='icon'/></div>\r\n\r\n            { nameEdit ?\r\n                <textarea className='taskNameInput' type='text' defaultValue={props.task.name} task={props.task._id} onChange={props.onChange}/>\r\n            : <p className='taskName' task={props.task._id} onClick={props.onClick}>{props.task.name}</p> }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IndFinishedTask","import axios from 'axios';\r\n\r\n// const api = axios.create({ baseURL: `/api`, });\r\n\r\nexport const insertTask = payload => axios.post(`/api/task`, payload);\r\nexport const getAllTasks = () => axios.get(`/api/tasks`);\r\nexport const updateTaskById = (id, payload) => axios.put(`/api/task/${id}`, payload);\r\nexport const deleteTaskById = id => axios.delete(`/api/task/${id}`);\r\n\r\nconst apis = { insertTask, getAllTasks, updateTaskById, deleteTaskById };\r\nexport default apis;","import React, { Component } from 'react';\r\nimport { CurrentTasksView, FinishedTasksView } from './pages';\r\nimport api from './api';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \r\n    }\r\n  }\r\n\r\n  async handleShowingTasks () {\r\n    // Method to call all tasks from the database and filter them according to their type value \r\n    let allTasks, todoTasks, finishedTasks;\r\n\r\n    await api.getAllTasks().then( tasks => allTasks = tasks.data.data ).catch( allTasks = []);\r\n\r\n    todoTasks = await allTasks.filter( task => task.type === 'to-do');\r\n    finishedTasks = await allTasks.filter( task => task.type === 'finished');\r\n    \r\n    this.setState({ allTasks: allTasks });\r\n    this.setState({ todoTasks: todoTasks });\r\n    this.setState({ finishedTasks: finishedTasks });\r\n\r\n  }\r\n\r\n  async setClockTime () {\r\n    // Method to get the current date and time and display it in the application\r\n    let date = new Date(), updatedDate;\r\n    updatedDate = await date.toLocaleString(('en-US'), { timezone: 'America/New_York' }).split(',');\r\n    date = date.toString().split(' ')\r\n    const appDate = `${date[1]} ${date[2]} |${updatedDate[1]}`\r\n    this.setState({ clockTime: appDate });\r\n\r\n    let clockTimeout = setTimeout( () => this.setClockTime(), 1000);\r\n\r\n    if (this.state.clockStopped) { clearTimeout(clockTimeout) }\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.setClockTime();\r\n    this.handleShowingTasks();\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    // Clears the main clock timeout \r\n    clearTimeout(this.setClockTime());\r\n  }\r\n  \r\n  render () {\r\n\r\n    const onChange = async (e) => {\r\n      // Main onChange function \r\n\r\n      if (e.target.className === 'taskNameInput') {\r\n        // Function to update the name value of a specific task\r\n        await this.setState({ taskNameInput: e.target.value });\r\n        let task = this.state.allTasks.filter( task => task._id === e.target.getAttribute('task') );\r\n        task[0].name = e.target.value;\r\n\r\n        await api.updateTaskById(task[0]._id, task[0]).then( task => console.log('Task Updated')).catch( err => alert(err) );\r\n      }\r\n\r\n      if (e.target.className === 'addTaskInput') {\r\n        this.setState({ addTaskInput: e.target.value });\r\n      }\r\n\r\n      if (e.target.className === 'dateInput') {\r\n        // Function to update the date value of a specified task \r\n        let task = this.state.todoTasks.filter( task => task._id === e.target.getAttribute('task') );\r\n        task[0].date = e.target.value;\r\n\r\n        await api.updateTaskById(task[0]._id, task[0]).then( task => console.log('Task Updated'));\r\n      }\r\n    }\r\n\r\n    const onClick = async (e) => {\r\n      // Main onClick Function\r\n\r\n      if (e.target.className === 'taskName') {\r\n        // Changes the p element of a specific task to the textarrea element to allow the user to change it \r\n        this.setState({ currentTaskOpen: e.target.getAttribute('task') });\r\n        this.setState({ taskNameEdit: true });\r\n      }\r\n\r\n      if (e.target.className === 'todoTasksCntr' || e.target.className === 'indFnshdTasksCntr') {\r\n        // Triggers the change of the textarea element of a certain task to turn back into the usual p element \r\n        this.setState({ taskNameEdit: false });\r\n      }\r\n\r\n      if (e.target.className === 'removeTaskBtn') {\r\n        // Removes a certain task from the database \r\n        await this.setState({ currentId: e.target.getAttribute('task') });\r\n\r\n        await api.deleteTaskById(e.target.getAttribute('task')).then( task => console.log('Task Removed') ).catch( err => this.setState({ allTasks: [] }) );\r\n        this.handleShowingTasks();\r\n        window.location.reload();\r\n      }\r\n      \r\n      if (e.target.className === 'finishTaskBtn') {\r\n        // Updates a certain task from the current tasks view to the finished tasks view \r\n        const task = this.state.todoTasks.filter( task => task._id === e.target.getAttribute('task'))\r\n        task[0].type = 'finished';\r\n\r\n        await api.updateTaskById(task[0]._id, task[0]).then( task => console.log('task updated') );\r\n        this.handleShowingTasks();\r\n      }\r\n\r\n      if (e.target.className === 'returnTaskBtn') {\r\n        // Updates a certain task from the finished tasks view to the current tasks view \r\n        const task = this.state.finishedTasks.filter( task => task._id === e.target.getAttribute('task'));\r\n        task[0].type = 'to-do';\r\n\r\n        await api.updateTaskById(task[0]._id, task[0]).then( task => console.log('task updated') );\r\n        this.handleShowingTasks();\r\n      }\r\n    }\r\n\r\n    // Takes care of bringing the finished tasks view \r\n    const setFinishedViewState = () => this.setState({ finishedTasksViewOn: !this.state.finishedTasksViewOn });\r\n\r\n    const addNewTask = async () => {\r\n      // Takes care of adding a new task element to the database\r\n      let object = { name: this.state.addTaskInput, date: ' ', type: 'to-do'}\r\n      await api.insertTask(object).then( task => console.log('Task Added') ).catch( err => alert('Name needed for adding task.') );\r\n      this.handleShowingTasks();\r\n      document.querySelector('.addTaskInput').value = ''\r\n    };\r\n      \r\n    return (\r\n      <div className=\"container\" onClick={onClick}>\r\n        <CurrentTasksView clockTime={this.state.clockTime} currentTaskOpen={this.state.currentTaskOpen} todoTasks={this.state.todoTasks} taskNameEdit={this.state.taskNameEdit} handleFinishedTsksView={setFinishedViewState} onChange={onChange} addNewTask={addNewTask} onClick={onClick}/> \r\n        \r\n        <FinishedTasksView currentTaskOpen={this.state.currentTaskOpen} finishedTasks={this.state.finishedTasks} taskNameEdit={this.state.taskNameEdit} finishedTsksActive={this.state.finishedTasksViewOn} handleFinishedTsksView={setFinishedViewState} onClick={onClick} onChange={onChange}/> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}